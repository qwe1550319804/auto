"use strict";
const config = require('./utils/config')
const axios = require("axios");
const os = require("os");
const arrAccount=[
    {
        account:'2e3d333436363130343237363531',
        password:'7472603430303536343c3d3531'
    }
]
var msg;
init()
async function init() {
  for (let i = 0; i < arrAccount.length; i++) {
    await jjLogin(i)
   
  }
  // await run()
}
async function jjLogin(i){
  //forÂæ™ÁéØË∞ÉÊé•Âè£
     const {headers,data}= await axios({
      url: config.api.jjApi,
      method: "post",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      data: {
        account: arrAccount[i].account,
        password: arrAccount[i].password,
      },
    });
    arrAccount[i].Cookie = headers["set-cookie"][6];
    arrAccount[i].data = data.data;
    console.log( arrAccount[i].data.screen_name)
    setTimeout(()=>{
    checkIn(i)
    },100)


  return arrAccount;
};
const checkIn = async (i) => {
  console.log( arrAccount[i].Cookie,'checkIn')
  try {
    
    // Êü•ËØ¢‰ªäÂ§©ÊòØÂê¶Á≠æÂà∞Ê≤°
    const checkStatusRes = await getCheckStatus(i)
    if (!checkStatusRes) {
      // Á≠æÂà∞
      const checkInRes = await axios({ url: config.api.checkIn, method: 'post',headers:{   Cookie: arrAccount[i].Cookie} })
      
      console.log(`Á≠æÂà∞ÊàêÂäü+${checkInRes.data.incr_point}ÁüøÁü≥ÔºåÊÄªÁüøÁü≥${checkInRes.data.sum_point}`)
    msg = arrAccount[i].data.screen_name+ os.EOL+`Á≠æÂà∞ÊàêÂäü+${checkInRes.data.incr_point}ÁüøÁü≥`+os.EOL+`ÊÄªÁüøÁü≥${checkInRes.data.sum_point}`+os.EOL

      // Êü•ËØ¢Á≠æÂà∞Â§©Êï∞
      const getCheckInDaysRes = await getCheckInDays(i)
      msg=msg+os.EOL+`ËøûÁª≠Á≠æÂà∞„Äê${getCheckInDaysRes.continuousDay}„ÄëÂ§©`+os.EOL+`ÊÄªÁ≠æÂà∞Â§©Êï∞„Äê${getCheckInDaysRes.sumCount}„Äë`+os.EOL+`ÊéòÈáë‰∏çÂÅú Á≠æÂà∞‰∏çÊñ≠üí™`
      console.log(`ËøûÁª≠Á≠æÂà∞„Äê${getCheckInDaysRes.continuousDay}„ÄëÂ§©  ÊÄªÁ≠æÂà∞Â§©Êï∞„Äê${getCheckInDaysRes.sumCount}„Äë  ÊéòÈáë‰∏çÂÅú Á≠æÂà∞‰∏çÊñ≠üí™`)

      // Á≠æÂà∞ÊàêÂäü ÂéªÊäΩÂ•ñ
      await draw(i)
    } else {
      console.log('‰ªäÊó•Â∑≤ÁªèÁ≠æÂà∞ ‚úÖ')
    }

  } catch (error) {
    console.error(`Á≠æÂà∞Â§±Ë¥•!=======> ${error}`)
  }
}
/**
 * Êü•Áúã‰ªäÂ§©ÊòØÂê¶Â∑≤ÁªèÁ≠æÂà∞
 *
 * @return {Boolean} ÊòØÂê¶Á≠æÂà∞Ëøá 
 */
const getCheckStatus = async (i) => {
  console.log(11111111111111)
  console.log( arrAccount[i].Cookie,' arrAccount[i].Cookie')      
  try {
    const getCheckStatusRes = await axios({
      url: config.api.getCheckStatus,
      method: 'get',
      headers:{   Cookie: arrAccount[i].Cookie}
    })
    return getCheckStatusRes.data
  } catch (error) {
    console.log('Êü•ËØ¢Á≠æÂà∞Â§±Ë¥•!')
    // throw `Êü•ËØ¢Á≠æÂà∞Â§±Ë¥•!„Äê${error}„Äë`
  }
}
/**
 *Êü•ËØ¢Á≠æÂà∞Â§©Êï∞
 *
 * @return {Object} continuousDay ËøûÁª≠Á≠æÂà∞Â§©Êï∞ sumCount ÊÄªÁ≠æÂà∞Â§©Êï∞
 */
const getCheckInDays = async () => {
  try {
    const getCheckInDays = await axios({ url: config.api.getCheckInDays, method: 'get', headers:{   Cookie: arrAccount[i].Cookie} })
    return { continuousDay: getCheckInDays.data.cont_count, sumCount: getCheckInDays.data.sum_count }
  } catch (error) {
    throw `Êü•ËØ¢Á≠æÂà∞Â§©Êï∞Â§±Ë¥•!üôÅ„Äê${getCheckInDays.err_msg}„Äë`
  }
}
/**
 * Êü•ËØ¢ÂΩìÂâçÁüøÁü≥
 *
 */
const getCurrentPoint = async () => {
  try {
    const getCurrentPointRes = await axios({ url: config.api.getCurrentPoint, method: 'get' , headers:{   Cookie: arrAccount[i].Cookie}})
    console.log(`ÂΩìÂâçÊÄªÁüøÁü≥Êï∞: ${getCurrentPointRes.data}`)
  } catch (error) {
    throw `Êü•ËØ¢ÁüøÁü≥Â§±Ë¥•!${error.err_msg}`
  }

}
/**
 * Êü•ËØ¢ÂÖçË¥πÊäΩÂ•ñÊ¨°Êï∞
 *
 * @return {Boolean} ÊòØÂê¶ÊúâÂÖçË¥πÊäΩÂ•ñÊ¨°Êï∞
 */
const getlotteryStatus = async () => {
  try {
    const getlotteryStatusRes = await axios({ url: config.api.getlotteryStatus, method: 'get', headers:{   Cookie: arrAccount[i].Cookie} })
    return getlotteryStatusRes.data.free_count === 0
  } catch (error) {
    throw `Êü•ËØ¢ÂÖçË¥πÊäΩÂ•ñÂ§±Ë¥•ÔºÅ„Äê${error}„Äë`
  }
}
/**
 * Ëé∑ÂèñÊ≤æÂñúÊ∞îÂàóË°®Áî®Êà∑historyId
 *
 * @return {string} Ë¢´Ê≤æÁöÑÂπ∏ËøêÂÑøÁöÑhistory_id
 */
const getLuckyUserHistoryId = async () => {
  try {
    // Êé•Âè£‰∏∫ÂàÜÈ°µÊü•ËØ¢  ÈªòËÆ§Êü•ËØ¢Êù°10Êù°Êï∞ÊçÆ {page_no: 0, page_size: 5}
    const luckyList = await axios({ url: config.api.getLuckyUserList, method: 'post', headers:{   Cookie: arrAccount[i].Cookie} })
    // ÈöèÊú∫ÊäΩÂèñ‰∏Ä‰ΩçÂπ∏ËøêÂÑø  Ê≤æ‰ªñ
    return luckyList.data.lotteries[Math.floor(Math.random() * luckyList.data.lotteries.length)]?.history_id
  } catch (error) {
    throw `Ëé∑ÂèñÊ≤æÂñúÊ∞îÂàóË°®Áî®Êà∑historyIdÂ§±Ë¥•`
  }
}
/**
 * Âç†ÂñúÊ∞î
 *
 */
const dipLucky = async () => {
  try {
    // Ëé∑ÂèñhistoryId
    const historyId = await getLuckyUserHistoryId()
    // Ê≤æÂñúÊ∞îÊé•Âè£   ‰º†ÈÄílottery_history_id
    const dipLuckyRes = await axios({ url: config.api.dipLucky, method: 'post', data: { lottery_history_id: historyId , headers:{   Cookie: arrAccount[i].Cookie}} })
    console.log(`Âç†ÂñúÊ∞îÊàêÂäü! üéâ „ÄêÂΩìÂâçÂπ∏ËøêÂÄºÔºö${dipLuckyRes.data.total_value}/6000„Äë`)
  } catch (error) {
    throw `Âç†ÂñúÊ∞îÂ§±Ë¥•ÔºÅ ${error}`
  }
}
/**
 * ÊäΩÂ•ñ
 *
 */
const draw = async () => {
  try {
    const freeCount = await getlotteryStatus()
    if (freeCount) {
      // Ê≤°ÊúâÂÖçË¥πÊäΩÂ•ñÊ¨°Êï∞
      throw '‰ªäÊó•ÂÖçË¥πÊäΩÂ•ñÂ∑≤Áî®ÂÆå'
    }

    // ÂºÄÂßãÊäΩÂ•ñ
    const drawRes = await axios({ url: config.api.draw, method: 'post' , headers:{   Cookie: arrAccount[i].Cookie}})
    console.log(`ÊÅ≠Âñú‰Ω†ÊäΩÂà∞„Äê${drawRes.data.lottery_name}„Äëüéâ`)

    // Ê≤æÂñúÊ∞î
    await dipLucky()
    if (drawRes.data.lottery_type === 1) {
      // ÊäΩÂà∞ÁüøÁü≥ Êü•ËØ¢ÊÄªÁüøÁü≥
      await getCurrentPoint()
    }
  } catch (error) {
    console.error(`ÊäΩÂ•ñÂ§±Ë¥•!=======> „Äê${error}„Äë`)
  }
}